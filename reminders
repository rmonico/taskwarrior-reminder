#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse_decorations
from argparse_decorations import Command
from datetime import datetime
import logging


APP_NAME = "Reminders"

argparse_decorations.init()

logging.basicConfig(level=logging.DEBUG)

CONFIG_FILE_VAR = 'REMINDERS_CONFIG'


def _get_config_file():
    import os
    if CONFIG_FILE_VAR in os.environ:
        return os.environ[CONFIG_FILE_VAR]

    xdg_home = os.environ.get('XDG_CONFIG_HOME', os.path.expanduser('~/.config'))
    return os.path.join(xdg_home, 'reminders', 'config.yaml')


def _get_configs():
    import os

    config_file_name = _get_config_file()

    logger.debug(f'Using config file: {config_file_name}')

    if not os.path.exists(config_file_name):
        os.makedirs(os.path.dirname(config_file_name), exist_ok=True)
        with open(config_file_name, 'w') as f:
            f.write('''# Its either on PATH ou specify full path to the command
notify_command: notify-send

# Time between checks in taskwarrior format
time_between_checks: 1min

# UTC offset, directly applied to reminder attribute when read from exported data
utc_offset: -3''')

    with open(_get_config_file(), 'r') as f:
        import yaml
        raw_yaml = yaml.safe_load(f)

        from types import SimpleNamespace
        return SimpleNamespace(**raw_yaml)


@Command('check', help='Check if there are reminders pending to show')
def do_check():
    global logger
    logger = logging.getLogger(__name__)
    from subprocess import PIPE, run

    configs = _get_configs()

    command = 'task' \
        f' reminder.after:now-{configs.time_between_checks}' \
        f' reminder.before:now+{configs.time_between_checks}' \
        ' status:pending' \
        ' export'.split(' ')

    logger.debug(f'Running command: {command}')
    process = run(command, stdout=PIPE)

    if process.returncode != 0:
        logger.error('Error running taskwarrior command')
        return

    raw = process.stdout.decode('utf-8')

    logger.debug(f'Raw data: {raw}')
    import json
    data = json.loads(raw)

    logger.debug(f'Json data: {data}')

    logger.info(f'Found {len(data)} reminders')

    if len(data) == 0:
        return

    for reminder in data:
        reminder_time = datetime.strptime(
                reminder['reminder'],
                '%Y%m%dT%H%M%SZ')
        reminder_time = reminder_time.replace(
                hour=reminder_time.hour + configs.utc_offset)

        reminder_str = datetime.strftime(reminder_time, '%H:%M')
        message = f'{reminder_str}: {reminder["description"]}'
        notify_command = [configs.notify_command, APP_NAME, message]

        run(notify_command)


argparse_decorations.parse_and_run()

argparse_decorations.finish()
